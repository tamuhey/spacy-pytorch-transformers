[metadata]
version = 0.5.0
description = spaCy pipelines for pre-trained BERT and other transformers
url = https://spacy.io
author = Explosion
author_email = contact@explosion.ai
license = MIT
long_description = file: README.md
long_description_content_type = text/markdown
classifiers =
    Development Status :: 4 - Beta
    Environment :: Console
    Intended Audience :: Developers
    Intended Audience :: Science/Research
    Topic :: Scientific/Engineering
    Topic :: Scientific/Engineering :: Artificial Intelligence
    License :: OSI Approved :: MIT License
    Operating System :: POSIX :: Linux
    Operating System :: MacOS :: MacOS X
    Operating System :: Microsoft :: Windows
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.7

[options]
zip_safe = false
include_package_data = true
python_requires = >=3.6
install_requires =
    spacy>=2.2.1,<2.3.0
    transformers>=2.0.0
    torch>=1.0.0
    torchcontrib>=0.0.2,<0.1.0
    srsly>=0.0.7,<1.1.0
    ftfy>=5.0.0,<6.0.0
    dataclasses>=0.6,<0.7; python_version < "3.7"
    importlib_metadata>=0.20; python_version < "3.8"
setup_requires =
    setuptools

[options.extras_require]
cuda =
    thinc_gpu_ops>=0.0.1,<0.1.0
    cupy>=5.0.0b4
cuda80 =
    thinc_gpu_ops>=0.0.1,<0.1.0
    cupy-cuda80>=5.0.0b4
cuda90 =
    thinc_gpu_ops>=0.0.1,<0.1.0
    cupy-cuda90>=5.0.0b4
cuda91 =
    thinc_gpu_ops>=0.0.1,<0.1.0
    cupy-cuda91>=5.0.0b4
cuda92 =
    thinc_gpu_ops>=0.0.1,<0.1.0
    cupy-cuda92>=5.0.0b4
cuda100 =
    thinc_gpu_ops>=0.0.1,<0.1.0
    cupy-cuda100>=5.0.0b4

[options.entry_points]
spacy_factories =
    trf_wordpiecer = spacy_transformers:TransformersWordPiecer.from_nlp
    trf_tok2vec = spacy_transformers:TransformersTok2Vec.from_nlp
    trf_textcat = spacy_transformers:TransformersTextCategorizer.from_nlp
spacy_languages =
    trf = spacy_transformers:TransformersLanguage

[bdist_wheel]
universal = true

[sdist]
formats = gztar

[flake8]
ignore = E203, E266, E501, E731, W503
max-line-length = 80
select = B,C,E,F,W,T4,B9
exclude =
    .env,
    .git,
    __pycache__,

[coverage:run]

[coverage:report]
omit =
    **/tests/*
    **/_vendorized/*
    **/about.py
exclude_lines =
    pragma: no cover
    # Don't complain about missing debug-only code:
    def __unicode__
    def __repr__
    if self\.debug
    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError
    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:
show_missing = True
